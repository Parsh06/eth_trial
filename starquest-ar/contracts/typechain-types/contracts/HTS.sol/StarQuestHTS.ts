/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StarQuestHTS {
  export type NFTDataStruct = {
    owner: PromiseOrValue<string>;
    metadata: PromiseOrValue<BytesLike>;
  };

  export type NFTDataStructOutput = [string, string] & {
    owner: string;
    metadata: string;
  };

  export type TokenInfoStruct = {
    decimals: PromiseOrValue<BigNumberish>;
    created: PromiseOrValue<boolean>;
  };

  export type TokenInfoStructOutput = [number, boolean] & {
    decimals: number;
    created: boolean;
  };
}

export interface StarQuestHTSInterface extends utils.Interface {
  functions: {
    "associateUserWithToken(address,address)": FunctionFragment;
    "batchAssociateTokens(address,address[])": FunctionFragment;
    "burnFungibleTokens(address,uint64)": FunctionFragment;
    "createGameTokens()": FunctionFragment;
    "emergencyTokenRecovery(address,address,uint64)": FunctionFragment;
    "getAllTokens()": FunctionFragment;
    "getNFTData(int64)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getUserNFTs(address)": FunctionFragment;
    "getUserTokenBalance(address,address)": FunctionFragment;
    "isUserAssociatedWithToken(address,address)": FunctionFragment;
    "mintFungibleTokens(address,address,uint64)": FunctionFragment;
    "mintNFT(address,bytes)": FunctionFragment;
    "nftData(address,int64)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setStarQuestCore(address)": FunctionFragment;
    "starQuestCore()": FunctionFragment;
    "starQuestNFT()": FunctionFragment;
    "starQuestToken()": FunctionFragment;
    "tokenAssociations(address,address)": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
    "tokensCreated()": FunctionFragment;
    "transferFungibleToken(address,address,address,uint64)": FunctionFragment;
    "transferNFT(address,address,int64)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userBalances(address)": FunctionFragment;
    "userNFTs(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "associateUserWithToken"
      | "batchAssociateTokens"
      | "burnFungibleTokens"
      | "createGameTokens"
      | "emergencyTokenRecovery"
      | "getAllTokens"
      | "getNFTData"
      | "getTokenInfo"
      | "getUserNFTs"
      | "getUserTokenBalance"
      | "isUserAssociatedWithToken"
      | "mintFungibleTokens"
      | "mintNFT"
      | "nftData"
      | "owner"
      | "renounceOwnership"
      | "rewardToken"
      | "setStarQuestCore"
      | "starQuestCore"
      | "starQuestNFT"
      | "starQuestToken"
      | "tokenAssociations"
      | "tokenInfo"
      | "tokensCreated"
      | "transferFungibleToken"
      | "transferNFT"
      | "transferOwnership"
      | "userBalances"
      | "userNFTs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "associateUserWithToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAssociateTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFungibleTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGameTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTokenRecovery",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNFTs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserAssociatedWithToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFungibleTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStarQuestCore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "starQuestCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "starQuestNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "starQuestToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAssociations",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFungibleToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userNFTs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "associateUserWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAssociateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnFungibleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGameTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTokenRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserAssociatedWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFungibleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStarQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starQuestNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starQuestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAssociations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFungibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNFTs", data: BytesLike): Result;

  events: {
    "NFTTransferred(address,address,address,int64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenAssociated(address,address)": EventFragment;
    "TokenBurned(address,uint64,int64[])": EventFragment;
    "TokenCreated(address,string,string,bool)": EventFragment;
    "TokenMinted(address,address,uint64,int64[])": EventFragment;
    "TokenTransferred(address,address,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAssociated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransferred"): EventFragment;
}

export interface NFTTransferredEventObject {
  token: string;
  from: string;
  to: string;
  serialNumber: BigNumber;
}
export type NFTTransferredEvent = TypedEvent<
  [string, string, string, BigNumber],
  NFTTransferredEventObject
>;

export type NFTTransferredEventFilter = TypedEventFilter<NFTTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenAssociatedEventObject {
  user: string;
  token: string;
}
export type TokenAssociatedEvent = TypedEvent<
  [string, string],
  TokenAssociatedEventObject
>;

export type TokenAssociatedEventFilter = TypedEventFilter<TokenAssociatedEvent>;

export interface TokenBurnedEventObject {
  token: string;
  amount: BigNumber;
  serialNumbers: BigNumber[];
}
export type TokenBurnedEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  TokenBurnedEventObject
>;

export type TokenBurnedEventFilter = TypedEventFilter<TokenBurnedEvent>;

export interface TokenCreatedEventObject {
  token: string;
  name: string;
  symbol: string;
  isFungible: boolean;
}
export type TokenCreatedEvent = TypedEvent<
  [string, string, string, boolean],
  TokenCreatedEventObject
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface TokenMintedEventObject {
  token: string;
  to: string;
  amount: BigNumber;
  serialNumbers: BigNumber[];
}
export type TokenMintedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[]],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface TokenTransferredEventObject {
  token: string;
  from: string;
  to: string;
  amount: BigNumber;
}
export type TokenTransferredEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenTransferredEventObject
>;

export type TokenTransferredEventFilter =
  TypedEventFilter<TokenTransferredEvent>;

export interface StarQuestHTS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarQuestHTSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    associateUserWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchAssociateTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFungibleTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGameTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyTokenRecovery(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getNFTData(
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StarQuestHTS.NFTDataStructOutput]>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StarQuestHTS.TokenInfoStructOutput]>;

    getUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserTokenBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isUserAssociatedWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintFungibleTokens(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNFT(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nftData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; metadata: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<[string]>;

    starQuestNFT(overrides?: CallOverrides): Promise<[string]>;

    starQuestToken(overrides?: CallOverrides): Promise<[string]>;

    tokenAssociations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { decimals: number; created: boolean }>;

    tokensCreated(overrides?: CallOverrides): Promise<[boolean]>;

    transferFungibleToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferNFT(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  associateUserWithToken(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchAssociateTokens(
    user: PromiseOrValue<string>,
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFungibleTokens(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGameTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyTokenRecovery(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllTokens(overrides?: CallOverrides): Promise<string[]>;

  getNFTData(
    serialNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StarQuestHTS.NFTDataStructOutput>;

  getTokenInfo(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StarQuestHTS.TokenInfoStructOutput>;

  getUserNFTs(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserTokenBalance(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isUserAssociatedWithToken(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintFungibleTokens(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNFT(
    to: PromiseOrValue<string>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nftData(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { owner: string; metadata: string }>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setStarQuestCore(
    _starQuestCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starQuestCore(overrides?: CallOverrides): Promise<string>;

  starQuestNFT(overrides?: CallOverrides): Promise<string>;

  starQuestToken(overrides?: CallOverrides): Promise<string>;

  tokenAssociations(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { decimals: number; created: boolean }>;

  tokensCreated(overrides?: CallOverrides): Promise<boolean>;

  transferFungibleToken(
    token: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferNFT(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    serialNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userNFTs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    associateUserWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchAssociateTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    burnFungibleTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGameTokens(overrides?: CallOverrides): Promise<void>;

    emergencyTokenRecovery(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTokens(overrides?: CallOverrides): Promise<string[]>;

    getNFTData(
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StarQuestHTS.NFTDataStructOutput>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StarQuestHTS.TokenInfoStructOutput>;

    getUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserTokenBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserAssociatedWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintFungibleTokens(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintNFT(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; metadata: string }>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    starQuestCore(overrides?: CallOverrides): Promise<string>;

    starQuestNFT(overrides?: CallOverrides): Promise<string>;

    starQuestToken(overrides?: CallOverrides): Promise<string>;

    tokenAssociations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { decimals: number; created: boolean }>;

    tokensCreated(overrides?: CallOverrides): Promise<boolean>;

    transferFungibleToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferNFT(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "NFTTransferred(address,address,address,int64)"(
      token?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      serialNumber?: null
    ): NFTTransferredEventFilter;
    NFTTransferred(
      token?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      serialNumber?: null
    ): NFTTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokenAssociated(address,address)"(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): TokenAssociatedEventFilter;
    TokenAssociated(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): TokenAssociatedEventFilter;

    "TokenBurned(address,uint64,int64[])"(
      token?: PromiseOrValue<string> | null,
      amount?: null,
      serialNumbers?: null
    ): TokenBurnedEventFilter;
    TokenBurned(
      token?: PromiseOrValue<string> | null,
      amount?: null,
      serialNumbers?: null
    ): TokenBurnedEventFilter;

    "TokenCreated(address,string,string,bool)"(
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      isFungible?: null
    ): TokenCreatedEventFilter;
    TokenCreated(
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      isFungible?: null
    ): TokenCreatedEventFilter;

    "TokenMinted(address,address,uint64,int64[])"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      serialNumbers?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      serialNumbers?: null
    ): TokenMintedEventFilter;

    "TokenTransferred(address,address,address,uint64)"(
      token?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenTransferredEventFilter;
    TokenTransferred(
      token?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenTransferredEventFilter;
  };

  estimateGas: {
    associateUserWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchAssociateTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFungibleTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGameTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyTokenRecovery(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTData(
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserAssociatedWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFungibleTokens(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNFT(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nftData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starQuestCore(overrides?: CallOverrides): Promise<BigNumber>;

    starQuestNFT(overrides?: CallOverrides): Promise<BigNumber>;

    starQuestToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAssociations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensCreated(overrides?: CallOverrides): Promise<BigNumber>;

    transferFungibleToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferNFT(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    associateUserWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchAssociateTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFungibleTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGameTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyTokenRecovery(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTData(
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserAssociatedWithToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintFungibleTokens(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNFT(
      to: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nftData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    starQuestNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    starQuestToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAssociations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFungibleToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferNFT(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      serialNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
