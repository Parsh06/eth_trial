/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StarQuestFilecoinStorage {
  export type StorageRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    requester: PromiseOrValue<string>;
    cidHash: PromiseOrValue<string>;
    dataType: PromiseOrValue<BigNumberish>;
    dataSize: PromiseOrValue<BigNumberish>;
    storageDuration: PromiseOrValue<BigNumberish>;
    cost: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    expiresAt: PromiseOrValue<BigNumberish>;
    dealId: PromiseOrValue<string>;
    paid: PromiseOrValue<boolean>;
  };

  export type StorageRequestStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    id: string;
    requester: string;
    cidHash: string;
    dataType: number;
    dataSize: BigNumber;
    storageDuration: BigNumber;
    cost: BigNumber;
    status: number;
    createdAt: BigNumber;
    expiresAt: BigNumber;
    dealId: string;
    paid: boolean;
  };
}

export interface StarQuestFilecoinStorageInterface extends utils.Interface {
  functions: {
    "aiDatasets(bytes32)": FunctionFragment;
    "confirmStorage(bytes32,string)": FunctionFragment;
    "dataTypeCount(uint8)": FunctionFragment;
    "depositStorageBalance(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getAIDataset(bytes32)": FunctionFragment;
    "getStorageRequest(bytes32)": FunctionFragment;
    "getStorageStats()": FunctionFragment;
    "getUserDatasets(address)": FunctionFragment;
    "getUserStorageRequests(address)": FunctionFragment;
    "hasDatasetAccess(bytes32,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseDatasetAccess(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestRetrieval(bytes32)": FunctionFragment;
    "requestStorage(string,uint8,uint256,uint256)": FunctionFragment;
    "retrievalPrice()": FunctionFragment;
    "setContracts(address,address)": FunctionFragment;
    "setStoragePricing(uint256,uint256)": FunctionFragment;
    "starQuestCore()": FunctionFragment;
    "storagePrice()": FunctionFragment;
    "storageRequests(bytes32)": FunctionFragment;
    "synapseSdk()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uploadAIDataset(string,string,uint256,uint256)": FunctionFragment;
    "usdfc()": FunctionFragment;
    "userDatasets(address,uint256)": FunctionFragment;
    "userStorageBalance(address)": FunctionFragment;
    "userStorageRequests(address,uint256)": FunctionFragment;
    "verifyDataset(bytes32,bool)": FunctionFragment;
    "withdrawStorageBalance(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aiDatasets"
      | "confirmStorage"
      | "dataTypeCount"
      | "depositStorageBalance"
      | "emergencyWithdraw"
      | "getAIDataset"
      | "getStorageRequest"
      | "getStorageStats"
      | "getUserDatasets"
      | "getUserStorageRequests"
      | "hasDatasetAccess"
      | "owner"
      | "purchaseDatasetAccess"
      | "renounceOwnership"
      | "requestRetrieval"
      | "requestStorage"
      | "retrievalPrice"
      | "setContracts"
      | "setStoragePricing"
      | "starQuestCore"
      | "storagePrice"
      | "storageRequests"
      | "synapseSdk"
      | "transferOwnership"
      | "uploadAIDataset"
      | "usdfc"
      | "userDatasets"
      | "userStorageBalance"
      | "userStorageRequests"
      | "verifyDataset"
      | "withdrawStorageBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aiDatasets",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmStorage",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dataTypeCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStorageBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAIDataset",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDatasets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStorageRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDatasetAccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseDatasetAccess",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRetrieval",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestStorage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retrievalPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStoragePricing",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "starQuestCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storagePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storageRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "synapseSdk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadAIDataset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "usdfc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDatasets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStorageBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStorageRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDataset",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStorageBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "aiDatasets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStorageBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAIDataset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDatasets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStorageRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDatasetAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDatasetAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRetrieval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStoragePricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storagePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synapseSdk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadAIDataset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdfc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDatasets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStorageBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStorageRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDataset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStorageBalance",
    data: BytesLike
  ): Result;

  events: {
    "AIDatasetAccessed(bytes32,address,uint256)": EventFragment;
    "AIDatasetUploaded(bytes32,address,string)": EventFragment;
    "DataRetrieved(bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "StorageBalanceUpdated(address,uint256)": EventFragment;
    "StorageCompleted(bytes32,string)": EventFragment;
    "StorageRequested(bytes32,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AIDatasetAccessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AIDatasetUploaded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataRetrieved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StorageBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StorageCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StorageRequested"): EventFragment;
}

export interface AIDatasetAccessedEventObject {
  id: string;
  accessor: string;
  cost: BigNumber;
}
export type AIDatasetAccessedEvent = TypedEvent<
  [string, string, BigNumber],
  AIDatasetAccessedEventObject
>;

export type AIDatasetAccessedEventFilter =
  TypedEventFilter<AIDatasetAccessedEvent>;

export interface AIDatasetUploadedEventObject {
  id: string;
  contributor: string;
  cidHash: string;
}
export type AIDatasetUploadedEvent = TypedEvent<
  [string, string, string],
  AIDatasetUploadedEventObject
>;

export type AIDatasetUploadedEventFilter =
  TypedEventFilter<AIDatasetUploadedEvent>;

export interface DataRetrievedEventObject {
  id: string;
  retriever: string;
}
export type DataRetrievedEvent = TypedEvent<
  [string, string],
  DataRetrievedEventObject
>;

export type DataRetrievedEventFilter = TypedEventFilter<DataRetrievedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentReceivedEventObject {
  payer: string;
  amount: BigNumber;
}
export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  PaymentReceivedEventObject
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export interface StorageBalanceUpdatedEventObject {
  user: string;
  balance: BigNumber;
}
export type StorageBalanceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  StorageBalanceUpdatedEventObject
>;

export type StorageBalanceUpdatedEventFilter =
  TypedEventFilter<StorageBalanceUpdatedEvent>;

export interface StorageCompletedEventObject {
  id: string;
  dealId: string;
}
export type StorageCompletedEvent = TypedEvent<
  [string, string],
  StorageCompletedEventObject
>;

export type StorageCompletedEventFilter =
  TypedEventFilter<StorageCompletedEvent>;

export interface StorageRequestedEventObject {
  id: string;
  requester: string;
  cidHash: string;
  cost: BigNumber;
}
export type StorageRequestedEvent = TypedEvent<
  [string, string, string, BigNumber],
  StorageRequestedEventObject
>;

export type StorageRequestedEventFilter =
  TypedEventFilter<StorageRequestedEvent>;

export interface StarQuestFilecoinStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarQuestFilecoinStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aiDatasets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: string;
        cidHash: string;
        metadataCid: string;
        contributor: string;
        size: BigNumber;
        rewardPool: BigNumber;
        accessPrice: BigNumber;
        verified: boolean;
        downloads: BigNumber;
      }
    >;

    confirmStorage(
      requestId: PromiseOrValue<BytesLike>,
      dealId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAIDataset(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: string;
        cidHash: string;
        metadataCid: string;
        contributor: string;
        size: BigNumber;
        rewardPool: BigNumber;
        accessPrice: BigNumber;
        verified: boolean;
        downloads: BigNumber;
      }
    >;

    getStorageRequest(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[StarQuestFilecoinStorage.StorageRequestStructOutput]>;

    getStorageStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalChallengeData: BigNumber;
        totalAITrainingData: BigNumber;
        totalPlayerProofs: BigNumber;
        totalGameAssets: BigNumber;
      }
    >;

    getUserDatasets(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserStorageRequests(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRetrieval(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestStorage(
      cidHash: PromiseOrValue<string>,
      dataType: PromiseOrValue<BigNumberish>,
      dataSize: PromiseOrValue<BigNumberish>,
      storageDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrievalPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setContracts(
      _synapseSdk: PromiseOrValue<string>,
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStoragePricing(
      _storagePrice: PromiseOrValue<BigNumberish>,
      _retrievalPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<[string]>;

    storagePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    storageRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        id: string;
        requester: string;
        cidHash: string;
        dataType: number;
        dataSize: BigNumber;
        storageDuration: BigNumber;
        cost: BigNumber;
        status: number;
        createdAt: BigNumber;
        expiresAt: BigNumber;
        dealId: string;
        paid: boolean;
      }
    >;

    synapseSdk(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uploadAIDataset(
      cidHash: PromiseOrValue<string>,
      metadataCid: PromiseOrValue<string>,
      dataSize: PromiseOrValue<BigNumberish>,
      accessPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdfc(overrides?: CallOverrides): Promise<[string]>;

    userDatasets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userStorageBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStorageRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyDataset(
      datasetId: PromiseOrValue<BytesLike>,
      verified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aiDatasets(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      id: string;
      cidHash: string;
      metadataCid: string;
      contributor: string;
      size: BigNumber;
      rewardPool: BigNumber;
      accessPrice: BigNumber;
      verified: boolean;
      downloads: BigNumber;
    }
  >;

  confirmStorage(
    requestId: PromiseOrValue<BytesLike>,
    dealId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataTypeCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositStorageBalance(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAIDataset(
    datasetId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      id: string;
      cidHash: string;
      metadataCid: string;
      contributor: string;
      size: BigNumber;
      rewardPool: BigNumber;
      accessPrice: BigNumber;
      verified: boolean;
      downloads: BigNumber;
    }
  >;

  getStorageRequest(
    requestId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<StarQuestFilecoinStorage.StorageRequestStructOutput>;

  getStorageStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalChallengeData: BigNumber;
      totalAITrainingData: BigNumber;
      totalPlayerProofs: BigNumber;
      totalGameAssets: BigNumber;
    }
  >;

  getUserDatasets(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserStorageRequests(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasDatasetAccess(
    datasetId: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseDatasetAccess(
    datasetId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRetrieval(
    requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestStorage(
    cidHash: PromiseOrValue<string>,
    dataType: PromiseOrValue<BigNumberish>,
    dataSize: PromiseOrValue<BigNumberish>,
    storageDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrievalPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setContracts(
    _synapseSdk: PromiseOrValue<string>,
    _starQuestCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStoragePricing(
    _storagePrice: PromiseOrValue<BigNumberish>,
    _retrievalPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starQuestCore(overrides?: CallOverrides): Promise<string>;

  storagePrice(overrides?: CallOverrides): Promise<BigNumber>;

  storageRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      id: string;
      requester: string;
      cidHash: string;
      dataType: number;
      dataSize: BigNumber;
      storageDuration: BigNumber;
      cost: BigNumber;
      status: number;
      createdAt: BigNumber;
      expiresAt: BigNumber;
      dealId: string;
      paid: boolean;
    }
  >;

  synapseSdk(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uploadAIDataset(
    cidHash: PromiseOrValue<string>,
    metadataCid: PromiseOrValue<string>,
    dataSize: PromiseOrValue<BigNumberish>,
    accessPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdfc(overrides?: CallOverrides): Promise<string>;

  userDatasets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  userStorageBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStorageRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyDataset(
    datasetId: PromiseOrValue<BytesLike>,
    verified: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStorageBalance(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aiDatasets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: string;
        cidHash: string;
        metadataCid: string;
        contributor: string;
        size: BigNumber;
        rewardPool: BigNumber;
        accessPrice: BigNumber;
        verified: boolean;
        downloads: BigNumber;
      }
    >;

    confirmStorage(
      requestId: PromiseOrValue<BytesLike>,
      dealId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dataTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getAIDataset(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: string;
        cidHash: string;
        metadataCid: string;
        contributor: string;
        size: BigNumber;
        rewardPool: BigNumber;
        accessPrice: BigNumber;
        verified: boolean;
        downloads: BigNumber;
      }
    >;

    getStorageRequest(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<StarQuestFilecoinStorage.StorageRequestStructOutput>;

    getStorageStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalChallengeData: BigNumber;
        totalAITrainingData: BigNumber;
        totalPlayerProofs: BigNumber;
        totalGameAssets: BigNumber;
      }
    >;

    getUserDatasets(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserStorageRequests(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestRetrieval(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestStorage(
      cidHash: PromiseOrValue<string>,
      dataType: PromiseOrValue<BigNumberish>,
      dataSize: PromiseOrValue<BigNumberish>,
      storageDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    retrievalPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setContracts(
      _synapseSdk: PromiseOrValue<string>,
      _starQuestCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStoragePricing(
      _storagePrice: PromiseOrValue<BigNumberish>,
      _retrievalPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    starQuestCore(overrides?: CallOverrides): Promise<string>;

    storagePrice(overrides?: CallOverrides): Promise<BigNumber>;

    storageRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        id: string;
        requester: string;
        cidHash: string;
        dataType: number;
        dataSize: BigNumber;
        storageDuration: BigNumber;
        cost: BigNumber;
        status: number;
        createdAt: BigNumber;
        expiresAt: BigNumber;
        dealId: string;
        paid: boolean;
      }
    >;

    synapseSdk(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uploadAIDataset(
      cidHash: PromiseOrValue<string>,
      metadataCid: PromiseOrValue<string>,
      dataSize: PromiseOrValue<BigNumberish>,
      accessPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    usdfc(overrides?: CallOverrides): Promise<string>;

    userDatasets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    userStorageBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStorageRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyDataset(
      datasetId: PromiseOrValue<BytesLike>,
      verified: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AIDatasetAccessed(bytes32,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      accessor?: PromiseOrValue<string> | null,
      cost?: null
    ): AIDatasetAccessedEventFilter;
    AIDatasetAccessed(
      id?: PromiseOrValue<BytesLike> | null,
      accessor?: PromiseOrValue<string> | null,
      cost?: null
    ): AIDatasetAccessedEventFilter;

    "AIDatasetUploaded(bytes32,address,string)"(
      id?: PromiseOrValue<BytesLike> | null,
      contributor?: PromiseOrValue<string> | null,
      cidHash?: null
    ): AIDatasetUploadedEventFilter;
    AIDatasetUploaded(
      id?: PromiseOrValue<BytesLike> | null,
      contributor?: PromiseOrValue<string> | null,
      cidHash?: null
    ): AIDatasetUploadedEventFilter;

    "DataRetrieved(bytes32,address)"(
      id?: PromiseOrValue<BytesLike> | null,
      retriever?: PromiseOrValue<string> | null
    ): DataRetrievedEventFilter;
    DataRetrieved(
      id?: PromiseOrValue<BytesLike> | null,
      retriever?: PromiseOrValue<string> | null
    ): DataRetrievedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PaymentReceived(address,uint256)"(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): PaymentReceivedEventFilter;

    "StorageBalanceUpdated(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      balance?: null
    ): StorageBalanceUpdatedEventFilter;
    StorageBalanceUpdated(
      user?: PromiseOrValue<string> | null,
      balance?: null
    ): StorageBalanceUpdatedEventFilter;

    "StorageCompleted(bytes32,string)"(
      id?: PromiseOrValue<BytesLike> | null,
      dealId?: null
    ): StorageCompletedEventFilter;
    StorageCompleted(
      id?: PromiseOrValue<BytesLike> | null,
      dealId?: null
    ): StorageCompletedEventFilter;

    "StorageRequested(bytes32,address,string,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      requester?: PromiseOrValue<string> | null,
      cidHash?: null,
      cost?: null
    ): StorageRequestedEventFilter;
    StorageRequested(
      id?: PromiseOrValue<BytesLike> | null,
      requester?: PromiseOrValue<string> | null,
      cidHash?: null,
      cost?: null
    ): StorageRequestedEventFilter;
  };

  estimateGas: {
    aiDatasets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmStorage(
      requestId: PromiseOrValue<BytesLike>,
      dealId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAIDataset(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStorageRequest(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStorageStats(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDatasets(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStorageRequests(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRetrieval(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestStorage(
      cidHash: PromiseOrValue<string>,
      dataType: PromiseOrValue<BigNumberish>,
      dataSize: PromiseOrValue<BigNumberish>,
      storageDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrievalPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setContracts(
      _synapseSdk: PromiseOrValue<string>,
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStoragePricing(
      _storagePrice: PromiseOrValue<BigNumberish>,
      _retrievalPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starQuestCore(overrides?: CallOverrides): Promise<BigNumber>;

    storagePrice(overrides?: CallOverrides): Promise<BigNumber>;

    storageRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synapseSdk(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uploadAIDataset(
      cidHash: PromiseOrValue<string>,
      metadataCid: PromiseOrValue<string>,
      dataSize: PromiseOrValue<BigNumberish>,
      accessPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdfc(overrides?: CallOverrides): Promise<BigNumber>;

    userDatasets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStorageBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStorageRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyDataset(
      datasetId: PromiseOrValue<BytesLike>,
      verified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aiDatasets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmStorage(
      requestId: PromiseOrValue<BytesLike>,
      dealId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAIDataset(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStorageRequest(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStorageStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDatasets(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStorageRequests(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseDatasetAccess(
      datasetId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRetrieval(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestStorage(
      cidHash: PromiseOrValue<string>,
      dataType: PromiseOrValue<BigNumberish>,
      dataSize: PromiseOrValue<BigNumberish>,
      storageDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrievalPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContracts(
      _synapseSdk: PromiseOrValue<string>,
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStoragePricing(
      _storagePrice: PromiseOrValue<BigNumberish>,
      _retrievalPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storagePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storageRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synapseSdk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uploadAIDataset(
      cidHash: PromiseOrValue<string>,
      metadataCid: PromiseOrValue<string>,
      dataSize: PromiseOrValue<BigNumberish>,
      accessPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdfc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDatasets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStorageBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStorageRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyDataset(
      datasetId: PromiseOrValue<BytesLike>,
      verified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStorageBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
