/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StarQuestOracle {
  export type LocationDataStruct = {
    latitude: PromiseOrValue<BigNumberish>;
    longitude: PromiseOrValue<BigNumberish>;
    accuracy: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    verifier: PromiseOrValue<string>;
  };

  export type LocationDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    latitude: BigNumber;
    longitude: BigNumber;
    accuracy: BigNumber;
    timestamp: BigNumber;
    verifier: string;
  };
}

export interface StarQuestOracleInterface extends utils.Interface {
  functions: {
    "MAX_PRICE_AGE()": FunctionFragment;
    "PRICE_DECIMALS()": FunctionFragment;
    "addAsset(bytes32,string)": FunctionFragment;
    "authorizeOracle(address,bool)": FunctionFragment;
    "authorizedOracles(address)": FunctionFragment;
    "batchUpdatePrices(bytes32[],uint256[])": FunctionFragment;
    "emergencyPriceUpdate(bytes32,uint256)": FunctionFragment;
    "getLocationVerification(bytes32)": FunctionFragment;
    "getMultiplePrices(bytes32[])": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "grantOracleAssetAccess(address,bytes32,bool)": FunctionFragment;
    "isPriceFresh(bytes32)": FunctionFragment;
    "lastUpdated(bytes32)": FunctionFragment;
    "locationVerifications(bytes32)": FunctionFragment;
    "oracleAssetAccess(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeeds(bytes32)": FunctionFragment;
    "prices(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStarQuestCore(address)": FunctionFragment;
    "starQuestCore()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePrice(bytes32,uint256)": FunctionFragment;
    "validAssets(bytes32)": FunctionFragment;
    "verifyLocation(bytes32,int256,int256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PRICE_AGE"
      | "PRICE_DECIMALS"
      | "addAsset"
      | "authorizeOracle"
      | "authorizedOracles"
      | "batchUpdatePrices"
      | "emergencyPriceUpdate"
      | "getLocationVerification"
      | "getMultiplePrices"
      | "getPrice"
      | "grantOracleAssetAccess"
      | "isPriceFresh"
      | "lastUpdated"
      | "locationVerifications"
      | "oracleAssetAccess"
      | "owner"
      | "priceFeeds"
      | "prices"
      | "renounceOwnership"
      | "setStarQuestCore"
      | "starQuestCore"
      | "transferOwnership"
      | "updatePrice"
      | "validAssets"
      | "verifyLocation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_PRICE_AGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedOracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdatePrices",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPriceUpdate",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocationVerification",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplePrices",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantOracleAssetAccess",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceFresh",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdated",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "locationVerifications",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleAssetAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStarQuestCore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "starQuestCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validAssets",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyLocation",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PRICE_AGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdatePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocationVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantOracleAssetAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceFresh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "locationVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleAssetAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStarQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyLocation",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(bytes32,string)": EventFragment;
    "LocationVerified(bytes32,int256,int256,address)": EventFragment;
    "OracleAuthorized(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceUpdated(bytes32,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocationVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export interface AssetAddedEventObject {
  asset: string;
  name: string;
}
export type AssetAddedEvent = TypedEvent<
  [string, string],
  AssetAddedEventObject
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface LocationVerifiedEventObject {
  locationHash: string;
  latitude: BigNumber;
  longitude: BigNumber;
  verifier: string;
}
export type LocationVerifiedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  LocationVerifiedEventObject
>;

export type LocationVerifiedEventFilter =
  TypedEventFilter<LocationVerifiedEvent>;

export interface OracleAuthorizedEventObject {
  oracle: string;
  authorized: boolean;
}
export type OracleAuthorizedEvent = TypedEvent<
  [string, boolean],
  OracleAuthorizedEventObject
>;

export type OracleAuthorizedEventFilter =
  TypedEventFilter<OracleAuthorizedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceUpdatedEventObject {
  asset: string;
  price: BigNumber;
  oracle: string;
  timestamp: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface StarQuestOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarQuestOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PRICE_AGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAsset(
      asset: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeOracle(
      oracle: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedOracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    batchUpdatePrices(
      assets: PromiseOrValue<BytesLike>[],
      priceValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyPriceUpdate(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLocationVerification(
      locationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[StarQuestOracle.LocationDataStructOutput]>;

    getMultiplePrices(
      assets: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getPrice(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    grantOracleAssetAccess(
      oracle: PromiseOrValue<string>,
      asset: PromiseOrValue<BytesLike>,
      access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPriceFresh(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastUpdated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    locationVerifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        latitude: BigNumber;
        longitude: BigNumber;
        accuracy: BigNumber;
        timestamp: BigNumber;
        verifier: string;
      }
    >;

    oracleAssetAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeeds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        price: BigNumber;
        timestamp: BigNumber;
        oracle: string;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validAssets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyLocation(
      locationHash: PromiseOrValue<BytesLike>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_PRICE_AGE(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addAsset(
    asset: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeOracle(
    oracle: PromiseOrValue<string>,
    authorized: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedOracles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batchUpdatePrices(
    assets: PromiseOrValue<BytesLike>[],
    priceValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyPriceUpdate(
    asset: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLocationVerification(
    locationHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<StarQuestOracle.LocationDataStructOutput>;

  getMultiplePrices(
    assets: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  getPrice(
    asset: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  grantOracleAssetAccess(
    oracle: PromiseOrValue<string>,
    asset: PromiseOrValue<BytesLike>,
    access: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPriceFresh(
    asset: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastUpdated(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  locationVerifications(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      latitude: BigNumber;
      longitude: BigNumber;
      accuracy: BigNumber;
      timestamp: BigNumber;
      verifier: string;
    }
  >;

  oracleAssetAccess(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeeds(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prices(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      price: BigNumber;
      timestamp: BigNumber;
      oracle: string;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStarQuestCore(
    _starQuestCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starQuestCore(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    asset: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validAssets(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyLocation(
    locationHash: PromiseOrValue<BytesLike>,
    latitude: PromiseOrValue<BigNumberish>,
    longitude: PromiseOrValue<BigNumberish>,
    accuracy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_PRICE_AGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      asset: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeOracle(
      oracle: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedOracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchUpdatePrices(
      assets: PromiseOrValue<BytesLike>[],
      priceValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyPriceUpdate(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLocationVerification(
      locationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<StarQuestOracle.LocationDataStructOutput>;

    getMultiplePrices(
      assets: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getPrice(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    grantOracleAssetAccess(
      oracle: PromiseOrValue<string>,
      asset: PromiseOrValue<BytesLike>,
      access: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPriceFresh(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastUpdated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locationVerifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        latitude: BigNumber;
        longitude: BigNumber;
        accuracy: BigNumber;
        timestamp: BigNumber;
        verifier: string;
      }
    >;

    oracleAssetAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeeds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        price: BigNumber;
        timestamp: BigNumber;
        oracle: string;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    starQuestCore(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validAssets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyLocation(
      locationHash: PromiseOrValue<BytesLike>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetAdded(bytes32,string)"(
      asset?: PromiseOrValue<BytesLike> | null,
      name?: null
    ): AssetAddedEventFilter;
    AssetAdded(
      asset?: PromiseOrValue<BytesLike> | null,
      name?: null
    ): AssetAddedEventFilter;

    "LocationVerified(bytes32,int256,int256,address)"(
      locationHash?: PromiseOrValue<BytesLike> | null,
      latitude?: null,
      longitude?: null,
      verifier?: null
    ): LocationVerifiedEventFilter;
    LocationVerified(
      locationHash?: PromiseOrValue<BytesLike> | null,
      latitude?: null,
      longitude?: null,
      verifier?: null
    ): LocationVerifiedEventFilter;

    "OracleAuthorized(address,bool)"(
      oracle?: PromiseOrValue<string> | null,
      authorized?: null
    ): OracleAuthorizedEventFilter;
    OracleAuthorized(
      oracle?: PromiseOrValue<string> | null,
      authorized?: null
    ): OracleAuthorizedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceUpdated(bytes32,uint256,address,uint256)"(
      asset?: PromiseOrValue<BytesLike> | null,
      price?: null,
      oracle?: null,
      timestamp?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      asset?: PromiseOrValue<BytesLike> | null,
      price?: null,
      oracle?: null,
      timestamp?: null
    ): PriceUpdatedEventFilter;
  };

  estimateGas: {
    MAX_PRICE_AGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      asset: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeOracle(
      oracle: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedOracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchUpdatePrices(
      assets: PromiseOrValue<BytesLike>[],
      priceValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyPriceUpdate(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLocationVerification(
      locationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplePrices(
      assets: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantOracleAssetAccess(
      oracle: PromiseOrValue<string>,
      asset: PromiseOrValue<BytesLike>,
      access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPriceFresh(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locationVerifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleAssetAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starQuestCore(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validAssets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyLocation(
      locationHash: PromiseOrValue<BytesLike>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PRICE_AGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      asset: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOracle(
      oracle: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedOracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchUpdatePrices(
      assets: PromiseOrValue<BytesLike>[],
      priceValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyPriceUpdate(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLocationVerification(
      locationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplePrices(
      assets: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantOracleAssetAccess(
      oracle: PromiseOrValue<string>,
      asset: PromiseOrValue<BytesLike>,
      access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPriceFresh(
      asset: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locationVerifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleAssetAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      asset: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validAssets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyLocation(
      locationHash: PromiseOrValue<BytesLike>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
