/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StarQuest {
  export type ChallengeStruct = {
    id: PromiseOrValue<BigNumberish>;
    player: PromiseOrValue<string>;
    stakeAmount: PromiseOrValue<BigNumberish>;
    challengeHash: PromiseOrValue<string>;
    proofHash: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    completedAt: PromiseOrValue<BigNumberish>;
    aiVerified: PromiseOrValue<boolean>;
    starId: PromiseOrValue<BigNumberish>;
    starType: PromiseOrValue<BigNumberish>;
  };

  export type ChallengeStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    number
  ] & {
    id: BigNumber;
    player: string;
    stakeAmount: BigNumber;
    challengeHash: string;
    proofHash: string;
    status: number;
    createdAt: BigNumber;
    completedAt: BigNumber;
    aiVerified: boolean;
    starId: BigNumber;
    starType: number;
  };

  export type StarStruct = {
    id: PromiseOrValue<BigNumberish>;
    latitude: PromiseOrValue<BigNumberish>;
    longitude: PromiseOrValue<BigNumberish>;
    radius: PromiseOrValue<BigNumberish>;
    starType: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
    challengesCompleted: PromiseOrValue<BigNumberish>;
    totalStaked: PromiseOrValue<BigNumberish>;
  };

  export type StarStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    latitude: BigNumber;
    longitude: BigNumber;
    radius: BigNumber;
    starType: number;
    active: boolean;
    challengesCompleted: BigNumber;
    totalStaked: BigNumber;
  };
}

export interface StarQuestInterface extends utils.Interface {
  functions: {
    "addStar(uint256,int256,int256,uint256,uint8)": FunctionFragment;
    "authorizeAI(address,bool)": FunctionFragment;
    "authorizedAI(address)": FunctionFragment;
    "challenges(uint256)": FunctionFragment;
    "completeChallenge(uint256,string,bool)": FunctionFragment;
    "createStake(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getChallengeDetails(uint256)": FunctionFragment;
    "getPlayerChallengeHistory(address)": FunctionFragment;
    "getStarDetails(uint256)": FunctionFragment;
    "getStarMultiplier(uint8)": FunctionFragment;
    "houseFeePercent()": FunctionFragment;
    "maximumStake()": FunctionFragment;
    "minimumStake()": FunctionFragment;
    "oracleContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "playerChallengeHistory(address,uint256)": FunctionFragment;
    "playerStakes(address)": FunctionFragment;
    "playerStats(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGameParameters(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "stars(uint256)": FunctionFragment;
    "storageWallet()": FunctionFragment;
    "submitChallenge(uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateStar(uint256,bool)": FunctionFragment;
    "winMultiplier()": FunctionFragment;
    "withdrawBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addStar"
      | "authorizeAI"
      | "authorizedAI"
      | "challenges"
      | "completeChallenge"
      | "createStake"
      | "emergencyWithdraw"
      | "getChallengeDetails"
      | "getPlayerChallengeHistory"
      | "getStarDetails"
      | "getStarMultiplier"
      | "houseFeePercent"
      | "maximumStake"
      | "minimumStake"
      | "oracleContract"
      | "owner"
      | "pause"
      | "paused"
      | "playerChallengeHistory"
      | "playerStakes"
      | "playerStats"
      | "renounceOwnership"
      | "setGameParameters"
      | "stars"
      | "storageWallet"
      | "submitChallenge"
      | "transferOwnership"
      | "unpause"
      | "updateStar"
      | "winMultiplier"
      | "withdrawBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStar",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAI",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeChallenge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerChallengeHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStarDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStarMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "houseFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerChallengeHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGameParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stars",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storageWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitChallenge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateStar",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "winMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addStar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerChallengeHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStarDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStarMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "houseFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerChallengeHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storageWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateStar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;

  events: {
    "AIAgentAuthorized(address,bool)": EventFragment;
    "ChallengeCompleted(uint256,address,bool,uint256)": EventFragment;
    "ChallengeCreated(uint256,address,uint256,string)": EventFragment;
    "EmergencyWithdrawal(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "StarAdded(uint256,int256,int256,uint8)": EventFragment;
    "StarUpdated(uint256,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AIAgentAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StarAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StarUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AIAgentAuthorizedEventObject {
  aiAgent: string;
  authorized: boolean;
}
export type AIAgentAuthorizedEvent = TypedEvent<
  [string, boolean],
  AIAgentAuthorizedEventObject
>;

export type AIAgentAuthorizedEventFilter =
  TypedEventFilter<AIAgentAuthorizedEvent>;

export interface ChallengeCompletedEventObject {
  challengeId: BigNumber;
  player: string;
  success: boolean;
  payout: BigNumber;
}
export type ChallengeCompletedEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  ChallengeCompletedEventObject
>;

export type ChallengeCompletedEventFilter =
  TypedEventFilter<ChallengeCompletedEvent>;

export interface ChallengeCreatedEventObject {
  challengeId: BigNumber;
  player: string;
  starId: BigNumber;
  challengeHash: string;
}
export type ChallengeCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ChallengeCreatedEventObject
>;

export type ChallengeCreatedEventFilter =
  TypedEventFilter<ChallengeCreatedEvent>;

export interface EmergencyWithdrawalEventObject {
  player: string;
  amount: BigNumber;
}
export type EmergencyWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  EmergencyWithdrawalEventObject
>;

export type EmergencyWithdrawalEventFilter =
  TypedEventFilter<EmergencyWithdrawalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StakedEventObject {
  player: string;
  amount: BigNumber;
  challengeId: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StarAddedEventObject {
  starId: BigNumber;
  latitude: BigNumber;
  longitude: BigNumber;
  starType: number;
}
export type StarAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  StarAddedEventObject
>;

export type StarAddedEventFilter = TypedEventFilter<StarAddedEvent>;

export interface StarUpdatedEventObject {
  starId: BigNumber;
  active: boolean;
}
export type StarUpdatedEvent = TypedEvent<
  [BigNumber, boolean],
  StarUpdatedEventObject
>;

export type StarUpdatedEventFilter = TypedEventFilter<StarUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface StarQuest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarQuestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStar(
      starId: PromiseOrValue<BigNumberish>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      radius: PromiseOrValue<BigNumberish>,
      starType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeAI(
      aiAgent: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedAI(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        player: string;
        stakeAmount: BigNumber;
        challengeHash: string;
        proofHash: string;
        status: number;
        createdAt: BigNumber;
        completedAt: BigNumber;
        aiVerified: boolean;
        starId: BigNumber;
        starType: number;
      }
    >;

    completeChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createStake(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChallengeDetails(
      challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StarQuest.ChallengeStructOutput]>;

    getPlayerChallengeHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getStarDetails(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StarQuest.StarStructOutput]>;

    getStarMultiplier(
      starType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    houseFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    playerChallengeHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        amount: BigNumber;
        timestamp: BigNumber;
        active: boolean;
        challengeId: BigNumber;
      }
    >;

    playerStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalStaked: BigNumber;
        totalWon: BigNumber;
        challengesCompleted: BigNumber;
        challengesFailed: BigNumber;
        currentStreak: BigNumber;
        longestStreak: BigNumber;
        lastPlayedTimestamp: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGameParameters(
      _minimumStake: PromiseOrValue<BigNumberish>,
      _maximumStake: PromiseOrValue<BigNumberish>,
      _winMultiplier: PromiseOrValue<BigNumberish>,
      _houseFeePercent: PromiseOrValue<BigNumberish>,
      _storageWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        latitude: BigNumber;
        longitude: BigNumber;
        radius: BigNumber;
        starType: number;
        active: boolean;
        challengesCompleted: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    storageWallet(overrides?: CallOverrides): Promise<[string]>;

    submitChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      challengeHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStar(
      starId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addStar(
    starId: PromiseOrValue<BigNumberish>,
    latitude: PromiseOrValue<BigNumberish>,
    longitude: PromiseOrValue<BigNumberish>,
    radius: PromiseOrValue<BigNumberish>,
    starType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeAI(
    aiAgent: PromiseOrValue<string>,
    authorized: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedAI(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  challenges(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      number
    ] & {
      id: BigNumber;
      player: string;
      stakeAmount: BigNumber;
      challengeHash: string;
      proofHash: string;
      status: number;
      createdAt: BigNumber;
      completedAt: BigNumber;
      aiVerified: boolean;
      starId: BigNumber;
      starType: number;
    }
  >;

  completeChallenge(
    challengeId: PromiseOrValue<BigNumberish>,
    proofHash: PromiseOrValue<string>,
    success: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createStake(
    starId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChallengeDetails(
    challengeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StarQuest.ChallengeStructOutput>;

  getPlayerChallengeHistory(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getStarDetails(
    starId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StarQuest.StarStructOutput>;

  getStarMultiplier(
    starType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  houseFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  oracleContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  playerChallengeHistory(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerStakes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      amount: BigNumber;
      timestamp: BigNumber;
      active: boolean;
      challengeId: BigNumber;
    }
  >;

  playerStats(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalStaked: BigNumber;
      totalWon: BigNumber;
      challengesCompleted: BigNumber;
      challengesFailed: BigNumber;
      currentStreak: BigNumber;
      longestStreak: BigNumber;
      lastPlayedTimestamp: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGameParameters(
    _minimumStake: PromiseOrValue<BigNumberish>,
    _maximumStake: PromiseOrValue<BigNumberish>,
    _winMultiplier: PromiseOrValue<BigNumberish>,
    _houseFeePercent: PromiseOrValue<BigNumberish>,
    _storageWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stars(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      latitude: BigNumber;
      longitude: BigNumber;
      radius: BigNumber;
      starType: number;
      active: boolean;
      challengesCompleted: BigNumber;
      totalStaked: BigNumber;
    }
  >;

  storageWallet(overrides?: CallOverrides): Promise<string>;

  submitChallenge(
    challengeId: PromiseOrValue<BigNumberish>,
    challengeHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStar(
    starId: PromiseOrValue<BigNumberish>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStar(
      starId: PromiseOrValue<BigNumberish>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      radius: PromiseOrValue<BigNumberish>,
      starType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeAI(
      aiAgent: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedAI(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        player: string;
        stakeAmount: BigNumber;
        challengeHash: string;
        proofHash: string;
        status: number;
        createdAt: BigNumber;
        completedAt: BigNumber;
        aiVerified: boolean;
        starId: BigNumber;
        starType: number;
      }
    >;

    completeChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createStake(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getChallengeDetails(
      challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StarQuest.ChallengeStructOutput>;

    getPlayerChallengeHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getStarDetails(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StarQuest.StarStructOutput>;

    getStarMultiplier(
      starType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    houseFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    playerChallengeHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        amount: BigNumber;
        timestamp: BigNumber;
        active: boolean;
        challengeId: BigNumber;
      }
    >;

    playerStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalStaked: BigNumber;
        totalWon: BigNumber;
        challengesCompleted: BigNumber;
        challengesFailed: BigNumber;
        currentStreak: BigNumber;
        longestStreak: BigNumber;
        lastPlayedTimestamp: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGameParameters(
      _minimumStake: PromiseOrValue<BigNumberish>,
      _maximumStake: PromiseOrValue<BigNumberish>,
      _winMultiplier: PromiseOrValue<BigNumberish>,
      _houseFeePercent: PromiseOrValue<BigNumberish>,
      _storageWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        latitude: BigNumber;
        longitude: BigNumber;
        radius: BigNumber;
        starType: number;
        active: boolean;
        challengesCompleted: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    storageWallet(overrides?: CallOverrides): Promise<string>;

    submitChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      challengeHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateStar(
      starId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    winMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AIAgentAuthorized(address,bool)"(
      aiAgent?: PromiseOrValue<string> | null,
      authorized?: null
    ): AIAgentAuthorizedEventFilter;
    AIAgentAuthorized(
      aiAgent?: PromiseOrValue<string> | null,
      authorized?: null
    ): AIAgentAuthorizedEventFilter;

    "ChallengeCompleted(uint256,address,bool,uint256)"(
      challengeId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      success?: null,
      payout?: null
    ): ChallengeCompletedEventFilter;
    ChallengeCompleted(
      challengeId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      success?: null,
      payout?: null
    ): ChallengeCompletedEventFilter;

    "ChallengeCreated(uint256,address,uint256,string)"(
      challengeId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      starId?: null,
      challengeHash?: null
    ): ChallengeCreatedEventFilter;
    ChallengeCreated(
      challengeId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      starId?: null,
      challengeHash?: null
    ): ChallengeCreatedEventFilter;

    "EmergencyWithdrawal(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;
    EmergencyWithdrawal(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Staked(address,uint256,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null,
      challengeId?: null
    ): StakedEventFilter;
    Staked(
      player?: PromiseOrValue<string> | null,
      amount?: null,
      challengeId?: null
    ): StakedEventFilter;

    "StarAdded(uint256,int256,int256,uint8)"(
      starId?: PromiseOrValue<BigNumberish> | null,
      latitude?: null,
      longitude?: null,
      starType?: null
    ): StarAddedEventFilter;
    StarAdded(
      starId?: PromiseOrValue<BigNumberish> | null,
      latitude?: null,
      longitude?: null,
      starType?: null
    ): StarAddedEventFilter;

    "StarUpdated(uint256,bool)"(
      starId?: PromiseOrValue<BigNumberish> | null,
      active?: null
    ): StarUpdatedEventFilter;
    StarUpdated(
      starId?: PromiseOrValue<BigNumberish> | null,
      active?: null
    ): StarUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addStar(
      starId: PromiseOrValue<BigNumberish>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      radius: PromiseOrValue<BigNumberish>,
      starType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeAI(
      aiAgent: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedAI(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createStake(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChallengeDetails(
      challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerChallengeHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStarDetails(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStarMultiplier(
      starType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    houseFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    playerChallengeHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGameParameters(
      _minimumStake: PromiseOrValue<BigNumberish>,
      _maximumStake: PromiseOrValue<BigNumberish>,
      _winMultiplier: PromiseOrValue<BigNumberish>,
      _houseFeePercent: PromiseOrValue<BigNumberish>,
      _storageWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storageWallet(overrides?: CallOverrides): Promise<BigNumber>;

    submitChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      challengeHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStar(
      starId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStar(
      starId: PromiseOrValue<BigNumberish>,
      latitude: PromiseOrValue<BigNumberish>,
      longitude: PromiseOrValue<BigNumberish>,
      radius: PromiseOrValue<BigNumberish>,
      starType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeAI(
      aiAgent: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedAI(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createStake(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChallengeDetails(
      challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerChallengeHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStarDetails(
      starId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStarMultiplier(
      starType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    houseFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerChallengeHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGameParameters(
      _minimumStake: PromiseOrValue<BigNumberish>,
      _maximumStake: PromiseOrValue<BigNumberish>,
      _winMultiplier: PromiseOrValue<BigNumberish>,
      _houseFeePercent: PromiseOrValue<BigNumberish>,
      _storageWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storageWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitChallenge(
      challengeId: PromiseOrValue<BigNumberish>,
      challengeHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStar(
      starId: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
