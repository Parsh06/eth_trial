/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StarQuestConsensusService {
  export type AIDecisionLogStruct = {
    challengeId: PromiseOrValue<BytesLike>;
    aiAgent: PromiseOrValue<string>;
    challengeType: PromiseOrValue<string>;
    verified: PromiseOrValue<boolean>;
    confidence: PromiseOrValue<BigNumberish>;
    reasoningHash: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type AIDecisionLogStructOutput = [
    string,
    string,
    string,
    boolean,
    BigNumber,
    string,
    BigNumber
  ] & {
    challengeId: string;
    aiAgent: string;
    challengeType: string;
    verified: boolean;
    confidence: BigNumber;
    reasoningHash: string;
    timestamp: BigNumber;
  };

  export type ConsensusMessageStruct = {
    id: PromiseOrValue<BigNumberish>;
    messageType: PromiseOrValue<BigNumberish>;
    player: PromiseOrValue<string>;
    dataHash: PromiseOrValue<BytesLike>;
    ipfsHash: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    submitted: PromiseOrValue<boolean>;
    hcsMessageId: PromiseOrValue<string>;
  };

  export type ConsensusMessageStructOutput = [
    BigNumber,
    number,
    string,
    string,
    string,
    BigNumber,
    boolean,
    string
  ] & {
    id: BigNumber;
    messageType: number;
    player: string;
    dataHash: string;
    ipfsHash: string;
    timestamp: BigNumber;
    submitted: boolean;
    hcsMessageId: string;
  };

  export type GameEventLogStruct = {
    player: PromiseOrValue<string>;
    eventType: PromiseOrValue<string>;
    challengeId: PromiseOrValue<BytesLike>;
    stakeAmount: PromiseOrValue<BigNumberish>;
    success: PromiseOrValue<boolean>;
    payout: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    proofHash: PromiseOrValue<string>;
  };

  export type GameEventLogStructOutput = [
    string,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string
  ] & {
    player: string;
    eventType: string;
    challengeId: string;
    stakeAmount: BigNumber;
    success: boolean;
    payout: BigNumber;
    timestamp: BigNumber;
    proofHash: string;
  };

  export type LeaderboardEntryStruct = {
    player: PromiseOrValue<string>;
    totalStaked: PromiseOrValue<BigNumberish>;
    totalWon: PromiseOrValue<BigNumberish>;
    winRate: PromiseOrValue<BigNumberish>;
    streak: PromiseOrValue<BigNumberish>;
    lastUpdated: PromiseOrValue<BigNumberish>;
  };

  export type LeaderboardEntryStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    player: string;
    totalStaked: BigNumber;
    totalWon: BigNumber;
    winRate: BigNumber;
    streak: BigNumber;
    lastUpdated: BigNumber;
  };
}

export interface StarQuestConsensusServiceInterface extends utils.Interface {
  functions: {
    "aiDecisionLogs(bytes32)": FunctionFragment;
    "confirmHCSMessage(uint256,string)": FunctionFragment;
    "consensusMessages(uint256)": FunctionFragment;
    "gameEventLogs(bytes32)": FunctionFragment;
    "getAIDecisionLog(bytes32)": FunctionFragment;
    "getConsensusMessage(uint256)": FunctionFragment;
    "getGameEventLog(bytes32)": FunctionFragment;
    "getLeaderboardStats()": FunctionFragment;
    "getMessageCountByType(uint8)": FunctionFragment;
    "getPlayerMessageHistory(address)": FunctionFragment;
    "getPlayerRanking(address)": FunctionFragment;
    "getTopPlayers(uint256)": FunctionFragment;
    "getTotalMessageCount()": FunctionFragment;
    "leaderboard(address)": FunctionFragment;
    "messageCount()": FunctionFragment;
    "messageTypeCount(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerMessageHistory(address,uint256)": FunctionFragment;
    "playerRankings(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStarQuestCore(address)": FunctionFragment;
    "starQuestCore()": FunctionFragment;
    "submitAIDecision(bytes32,address,string,bool,uint256,string,string)": FunctionFragment;
    "submitAchievementUnlock(address,uint256,string,string)": FunctionFragment;
    "submitGameEvent(address,bytes32,uint256,bool,uint256,string,string)": FunctionFragment;
    "topPlayers(uint256)": FunctionFragment;
    "topicId()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTopicId(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aiDecisionLogs"
      | "confirmHCSMessage"
      | "consensusMessages"
      | "gameEventLogs"
      | "getAIDecisionLog"
      | "getConsensusMessage"
      | "getGameEventLog"
      | "getLeaderboardStats"
      | "getMessageCountByType"
      | "getPlayerMessageHistory"
      | "getPlayerRanking"
      | "getTopPlayers"
      | "getTotalMessageCount"
      | "leaderboard"
      | "messageCount"
      | "messageTypeCount"
      | "owner"
      | "playerMessageHistory"
      | "playerRankings"
      | "renounceOwnership"
      | "setStarQuestCore"
      | "starQuestCore"
      | "submitAIDecision"
      | "submitAchievementUnlock"
      | "submitGameEvent"
      | "topPlayers"
      | "topicId"
      | "transferOwnership"
      | "updateTopicId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aiDecisionLogs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmHCSMessage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "consensusMessages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameEventLogs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAIDecisionLog",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusMessage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameEventLog",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboardStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageCountByType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerMessageHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerRanking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMessageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "messageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageTypeCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerMessageHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerRankings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStarQuestCore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "starQuestCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitAIDecision",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAchievementUnlock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGameEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "topPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "topicId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTopicId",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "aiDecisionLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmHCSMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameEventLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAIDecisionLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameEventLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboardStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageCountByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerMessageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMessageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerMessageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerRankings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStarQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starQuestCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAIDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAchievementUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGameEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topicId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTopicId",
    data: BytesLike
  ): Result;

  events: {
    "AIDecisionLogged(bytes32,address,bool)": EventFragment;
    "GameEventLogged(bytes32,address,bool)": EventFragment;
    "HCSMessageConfirmed(uint256,string)": EventFragment;
    "LeaderboardUpdated(address,uint256)": EventFragment;
    "MessageSubmitted(uint256,uint8,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TopicUpdated(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AIDecisionLogged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameEventLogged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HCSMessageConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaderboardUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TopicUpdated"): EventFragment;
}

export interface AIDecisionLoggedEventObject {
  challengeId: string;
  aiAgent: string;
  verified: boolean;
}
export type AIDecisionLoggedEvent = TypedEvent<
  [string, string, boolean],
  AIDecisionLoggedEventObject
>;

export type AIDecisionLoggedEventFilter =
  TypedEventFilter<AIDecisionLoggedEvent>;

export interface GameEventLoggedEventObject {
  eventId: string;
  player: string;
  success: boolean;
}
export type GameEventLoggedEvent = TypedEvent<
  [string, string, boolean],
  GameEventLoggedEventObject
>;

export type GameEventLoggedEventFilter = TypedEventFilter<GameEventLoggedEvent>;

export interface HCSMessageConfirmedEventObject {
  messageId: BigNumber;
  hcsMessageId: string;
}
export type HCSMessageConfirmedEvent = TypedEvent<
  [BigNumber, string],
  HCSMessageConfirmedEventObject
>;

export type HCSMessageConfirmedEventFilter =
  TypedEventFilter<HCSMessageConfirmedEvent>;

export interface LeaderboardUpdatedEventObject {
  player: string;
  newRank: BigNumber;
}
export type LeaderboardUpdatedEvent = TypedEvent<
  [string, BigNumber],
  LeaderboardUpdatedEventObject
>;

export type LeaderboardUpdatedEventFilter =
  TypedEventFilter<LeaderboardUpdatedEvent>;

export interface MessageSubmittedEventObject {
  messageId: BigNumber;
  messageType: number;
  player: string;
}
export type MessageSubmittedEvent = TypedEvent<
  [BigNumber, number, string],
  MessageSubmittedEventObject
>;

export type MessageSubmittedEventFilter =
  TypedEventFilter<MessageSubmittedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TopicUpdatedEventObject {
  newTopicId: string;
}
export type TopicUpdatedEvent = TypedEvent<[string], TopicUpdatedEventObject>;

export type TopicUpdatedEventFilter = TypedEventFilter<TopicUpdatedEvent>;

export interface StarQuestConsensusService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarQuestConsensusServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aiDecisionLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, string, BigNumber] & {
        challengeId: string;
        aiAgent: string;
        challengeType: string;
        verified: boolean;
        confidence: BigNumber;
        reasoningHash: string;
        timestamp: BigNumber;
      }
    >;

    confirmHCSMessage(
      messageId: PromiseOrValue<BigNumberish>,
      hcsMessageId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consensusMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        string,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        messageType: number;
        player: string;
        dataHash: string;
        ipfsHash: string;
        timestamp: BigNumber;
        submitted: boolean;
        hcsMessageId: string;
      }
    >;

    gameEventLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string
      ] & {
        player: string;
        eventType: string;
        challengeId: string;
        stakeAmount: BigNumber;
        success: boolean;
        payout: BigNumber;
        timestamp: BigNumber;
        proofHash: string;
      }
    >;

    getAIDecisionLog(
      challengeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[StarQuestConsensusService.AIDecisionLogStructOutput]>;

    getConsensusMessage(
      messageId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StarQuestConsensusService.ConsensusMessageStructOutput]>;

    getGameEventLog(
      eventId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[StarQuestConsensusService.GameEventLogStructOutput]>;

    getLeaderboardStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPlayers: BigNumber;
        totalStaked: BigNumber;
        totalWon: BigNumber;
      }
    >;

    getMessageCountByType(
      messageType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerMessageHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPlayerRanking(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTopPlayers(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], StarQuestConsensusService.LeaderboardEntryStructOutput[]]
    >;

    getTotalMessageCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    leaderboard(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        player: string;
        totalStaked: BigNumber;
        totalWon: BigNumber;
        winRate: BigNumber;
        streak: BigNumber;
        lastUpdated: BigNumber;
      }
    >;

    messageCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerMessageHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerRankings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<[string]>;

    submitAIDecision(
      challengeId: PromiseOrValue<BytesLike>,
      aiAgent: PromiseOrValue<string>,
      challengeType: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      confidence: PromiseOrValue<BigNumberish>,
      reasoningHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitAchievementUnlock(
      player: PromiseOrValue<string>,
      achievementType: PromiseOrValue<BigNumberish>,
      achievementName: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGameEvent(
      player: PromiseOrValue<string>,
      challengeId: PromiseOrValue<BytesLike>,
      stakeAmount: PromiseOrValue<BigNumberish>,
      success: PromiseOrValue<boolean>,
      payout: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    topicId(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTopicId(
      _topicId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aiDecisionLogs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber, string, BigNumber] & {
      challengeId: string;
      aiAgent: string;
      challengeType: string;
      verified: boolean;
      confidence: BigNumber;
      reasoningHash: string;
      timestamp: BigNumber;
    }
  >;

  confirmHCSMessage(
    messageId: PromiseOrValue<BigNumberish>,
    hcsMessageId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consensusMessages(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, string, string, string, BigNumber, boolean, string] & {
      id: BigNumber;
      messageType: number;
      player: string;
      dataHash: string;
      ipfsHash: string;
      timestamp: BigNumber;
      submitted: boolean;
      hcsMessageId: string;
    }
  >;

  gameEventLogs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      player: string;
      eventType: string;
      challengeId: string;
      stakeAmount: BigNumber;
      success: boolean;
      payout: BigNumber;
      timestamp: BigNumber;
      proofHash: string;
    }
  >;

  getAIDecisionLog(
    challengeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<StarQuestConsensusService.AIDecisionLogStructOutput>;

  getConsensusMessage(
    messageId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StarQuestConsensusService.ConsensusMessageStructOutput>;

  getGameEventLog(
    eventId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<StarQuestConsensusService.GameEventLogStructOutput>;

  getLeaderboardStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalPlayers: BigNumber;
      totalStaked: BigNumber;
      totalWon: BigNumber;
    }
  >;

  getMessageCountByType(
    messageType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerMessageHistory(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPlayerRanking(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTopPlayers(
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], StarQuestConsensusService.LeaderboardEntryStructOutput[]]
  >;

  getTotalMessageCount(overrides?: CallOverrides): Promise<BigNumber>;

  leaderboard(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      player: string;
      totalStaked: BigNumber;
      totalWon: BigNumber;
      winRate: BigNumber;
      streak: BigNumber;
      lastUpdated: BigNumber;
    }
  >;

  messageCount(overrides?: CallOverrides): Promise<BigNumber>;

  messageTypeCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerMessageHistory(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerRankings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStarQuestCore(
    _starQuestCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starQuestCore(overrides?: CallOverrides): Promise<string>;

  submitAIDecision(
    challengeId: PromiseOrValue<BytesLike>,
    aiAgent: PromiseOrValue<string>,
    challengeType: PromiseOrValue<string>,
    verified: PromiseOrValue<boolean>,
    confidence: PromiseOrValue<BigNumberish>,
    reasoningHash: PromiseOrValue<string>,
    ipfsHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitAchievementUnlock(
    player: PromiseOrValue<string>,
    achievementType: PromiseOrValue<BigNumberish>,
    achievementName: PromiseOrValue<string>,
    ipfsHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGameEvent(
    player: PromiseOrValue<string>,
    challengeId: PromiseOrValue<BytesLike>,
    stakeAmount: PromiseOrValue<BigNumberish>,
    success: PromiseOrValue<boolean>,
    payout: PromiseOrValue<BigNumberish>,
    proofHash: PromiseOrValue<string>,
    ipfsHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topPlayers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  topicId(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTopicId(
    _topicId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aiDecisionLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, string, BigNumber] & {
        challengeId: string;
        aiAgent: string;
        challengeType: string;
        verified: boolean;
        confidence: BigNumber;
        reasoningHash: string;
        timestamp: BigNumber;
      }
    >;

    confirmHCSMessage(
      messageId: PromiseOrValue<BigNumberish>,
      hcsMessageId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    consensusMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        string,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        messageType: number;
        player: string;
        dataHash: string;
        ipfsHash: string;
        timestamp: BigNumber;
        submitted: boolean;
        hcsMessageId: string;
      }
    >;

    gameEventLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string
      ] & {
        player: string;
        eventType: string;
        challengeId: string;
        stakeAmount: BigNumber;
        success: boolean;
        payout: BigNumber;
        timestamp: BigNumber;
        proofHash: string;
      }
    >;

    getAIDecisionLog(
      challengeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<StarQuestConsensusService.AIDecisionLogStructOutput>;

    getConsensusMessage(
      messageId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StarQuestConsensusService.ConsensusMessageStructOutput>;

    getGameEventLog(
      eventId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<StarQuestConsensusService.GameEventLogStructOutput>;

    getLeaderboardStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPlayers: BigNumber;
        totalStaked: BigNumber;
        totalWon: BigNumber;
      }
    >;

    getMessageCountByType(
      messageType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerMessageHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPlayerRanking(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopPlayers(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], StarQuestConsensusService.LeaderboardEntryStructOutput[]]
    >;

    getTotalMessageCount(overrides?: CallOverrides): Promise<BigNumber>;

    leaderboard(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        player: string;
        totalStaked: BigNumber;
        totalWon: BigNumber;
        winRate: BigNumber;
        streak: BigNumber;
        lastUpdated: BigNumber;
      }
    >;

    messageCount(overrides?: CallOverrides): Promise<BigNumber>;

    messageTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerMessageHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerRankings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    starQuestCore(overrides?: CallOverrides): Promise<string>;

    submitAIDecision(
      challengeId: PromiseOrValue<BytesLike>,
      aiAgent: PromiseOrValue<string>,
      challengeType: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      confidence: PromiseOrValue<BigNumberish>,
      reasoningHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitAchievementUnlock(
      player: PromiseOrValue<string>,
      achievementType: PromiseOrValue<BigNumberish>,
      achievementName: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitGameEvent(
      player: PromiseOrValue<string>,
      challengeId: PromiseOrValue<BytesLike>,
      stakeAmount: PromiseOrValue<BigNumberish>,
      success: PromiseOrValue<boolean>,
      payout: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    topicId(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTopicId(
      _topicId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AIDecisionLogged(bytes32,address,bool)"(
      challengeId?: PromiseOrValue<BytesLike> | null,
      aiAgent?: PromiseOrValue<string> | null,
      verified?: null
    ): AIDecisionLoggedEventFilter;
    AIDecisionLogged(
      challengeId?: PromiseOrValue<BytesLike> | null,
      aiAgent?: PromiseOrValue<string> | null,
      verified?: null
    ): AIDecisionLoggedEventFilter;

    "GameEventLogged(bytes32,address,bool)"(
      eventId?: PromiseOrValue<BytesLike> | null,
      player?: PromiseOrValue<string> | null,
      success?: null
    ): GameEventLoggedEventFilter;
    GameEventLogged(
      eventId?: PromiseOrValue<BytesLike> | null,
      player?: PromiseOrValue<string> | null,
      success?: null
    ): GameEventLoggedEventFilter;

    "HCSMessageConfirmed(uint256,string)"(
      messageId?: PromiseOrValue<BigNumberish> | null,
      hcsMessageId?: null
    ): HCSMessageConfirmedEventFilter;
    HCSMessageConfirmed(
      messageId?: PromiseOrValue<BigNumberish> | null,
      hcsMessageId?: null
    ): HCSMessageConfirmedEventFilter;

    "LeaderboardUpdated(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      newRank?: null
    ): LeaderboardUpdatedEventFilter;
    LeaderboardUpdated(
      player?: PromiseOrValue<string> | null,
      newRank?: null
    ): LeaderboardUpdatedEventFilter;

    "MessageSubmitted(uint256,uint8,address)"(
      messageId?: PromiseOrValue<BigNumberish> | null,
      messageType?: null,
      player?: PromiseOrValue<string> | null
    ): MessageSubmittedEventFilter;
    MessageSubmitted(
      messageId?: PromiseOrValue<BigNumberish> | null,
      messageType?: null,
      player?: PromiseOrValue<string> | null
    ): MessageSubmittedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TopicUpdated(string)"(newTopicId?: null): TopicUpdatedEventFilter;
    TopicUpdated(newTopicId?: null): TopicUpdatedEventFilter;
  };

  estimateGas: {
    aiDecisionLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmHCSMessage(
      messageId: PromiseOrValue<BigNumberish>,
      hcsMessageId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consensusMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameEventLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAIDecisionLog(
      challengeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConsensusMessage(
      messageId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameEventLog(
      eventId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLeaderboardStats(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageCountByType(
      messageType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerMessageHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerRanking(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopPlayers(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMessageCount(overrides?: CallOverrides): Promise<BigNumber>;

    leaderboard(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageCount(overrides?: CallOverrides): Promise<BigNumber>;

    messageTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerMessageHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerRankings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starQuestCore(overrides?: CallOverrides): Promise<BigNumber>;

    submitAIDecision(
      challengeId: PromiseOrValue<BytesLike>,
      aiAgent: PromiseOrValue<string>,
      challengeType: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      confidence: PromiseOrValue<BigNumberish>,
      reasoningHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitAchievementUnlock(
      player: PromiseOrValue<string>,
      achievementType: PromiseOrValue<BigNumberish>,
      achievementName: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGameEvent(
      player: PromiseOrValue<string>,
      challengeId: PromiseOrValue<BytesLike>,
      stakeAmount: PromiseOrValue<BigNumberish>,
      success: PromiseOrValue<boolean>,
      payout: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topicId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTopicId(
      _topicId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aiDecisionLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmHCSMessage(
      messageId: PromiseOrValue<BigNumberish>,
      hcsMessageId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consensusMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameEventLogs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAIDecisionLog(
      challengeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConsensusMessage(
      messageId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameEventLog(
      eventId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLeaderboardStats(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageCountByType(
      messageType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerMessageHistory(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerRanking(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopPlayers(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMessageCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leaderboard(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageTypeCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerMessageHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerRankings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStarQuestCore(
      _starQuestCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starQuestCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitAIDecision(
      challengeId: PromiseOrValue<BytesLike>,
      aiAgent: PromiseOrValue<string>,
      challengeType: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      confidence: PromiseOrValue<BigNumberish>,
      reasoningHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitAchievementUnlock(
      player: PromiseOrValue<string>,
      achievementType: PromiseOrValue<BigNumberish>,
      achievementName: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGameEvent(
      player: PromiseOrValue<string>,
      challengeId: PromiseOrValue<BytesLike>,
      stakeAmount: PromiseOrValue<BigNumberish>,
      success: PromiseOrValue<boolean>,
      payout: PromiseOrValue<BigNumberish>,
      proofHash: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topicId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTopicId(
      _topicId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
